# Generated by Django 5.2.4 on 2025-07-09 23:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(max_length=100, unique=True, verbose_name='Field Name')),
                ('label', models.CharField(max_length=200, verbose_name='Display Label')),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('email', 'Email'), ('phone', 'Phone'), ('date', 'Date'), ('datetime', 'Date/Time'), ('select', 'Dropdown Select'), ('checkbox', 'Checkbox'), ('radio', 'Radio Buttons'), ('file', 'File Upload'), ('textarea', 'Text Area')], default='text', max_length=20, verbose_name='Field Type')),
                ('required', models.BooleanField(default=False, verbose_name='Required Field')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Display Order')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('options', models.TextField(blank=True, help_text='Comma-separated options', null=True, verbose_name='Options')),
                ('placeholder', models.CharField(blank=True, max_length=200, null=True, verbose_name='Placeholder')),
                ('help_text', models.CharField(blank=True, max_length=300, null=True, verbose_name='Help Text')),
                ('visitor_type', models.CharField(blank=True, choices=[('guest', 'Guest'), ('contractor', 'Contractor'), ('vendor', 'Vendor'), ('interview', 'Interviewee'), ('delivery', 'Delivery')], max_length=20, null=True, verbose_name='Visitor Type Restriction')),
            ],
            options={
                'verbose_name': 'Form Field',
                'verbose_name_plural': 'Form Fields',
                'ordering': ['order', 'label'],
            },
        ),
        migrations.CreateModel(
            name='VisitorSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('require_photo', models.BooleanField(default=True, verbose_name='Require Visitor Photo')),
                ('require_id', models.BooleanField(default=False, verbose_name='Require ID Verification')),
                ('default_checkin_duration', models.PositiveIntegerField(default=4, verbose_name='Default Check-in Duration')),
                ('enable_pre_registration', models.BooleanField(default=True, verbose_name='Enable Pre-Registration')),
                ('enable_health_check', models.BooleanField(default=True, verbose_name='Enable Health Declaration')),
                ('enable_auto_checkout', models.BooleanField(default=True, verbose_name='Enable Auto Check-out')),
                ('auto_checkout_time', models.TimeField(default='18:00', verbose_name='Auto Check-out Time')),
                ('badge_template', models.FileField(blank=True, null=True, upload_to='badge_templates/', verbose_name='Badge Template File')),
            ],
            options={
                'verbose_name': 'Visitor Setting',
                'verbose_name_plural': 'Visitor Settings',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('receptionist', 'Receptionist'), ('host', 'Host'), ('security', 'Security')], default='host', max_length=20, verbose_name='User Role')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('department', models.CharField(blank=True, max_length=100, null=True, verbose_name='Department')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='Profile Picture')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Verified Status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Visitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('company', models.CharField(blank=True, max_length=100, null=True, verbose_name='Company')),
                ('id_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID/Passport Number')),
                ('id_type', models.CharField(blank=True, max_length=30, null=True, verbose_name='ID Type')),
                ('visitor_type', models.CharField(choices=[('guest', 'Guest'), ('contractor', 'Contractor'), ('vendor', 'Vendor'), ('interview', 'Interviewee'), ('delivery', 'Delivery')], default='guest', max_length=20, verbose_name='Visitor Type')),
                ('purpose', models.TextField(blank=True, null=True, verbose_name='Visit Purpose')),
                ('expected_arrival', models.DateTimeField(blank=True, null=True, verbose_name='Expected Arrival')),
                ('check_in_time', models.DateTimeField(auto_now_add=True, verbose_name='Check-in Time')),
                ('check_out_time', models.DateTimeField(blank=True, null=True, verbose_name='Check-out Time')),
                ('status', models.CharField(choices=[('pre_registered', 'Pre-Registered'), ('checked_in', 'Checked In'), ('in_meeting', 'In Meeting'), ('checked_out', 'Checked Out'), ('blacklisted', 'Blacklisted')], default='checked_in', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional Notes')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='visitor_photos/', verbose_name='Photo')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='visitor_signatures/', verbose_name='Signature')),
                ('nda', models.FileField(blank=True, null=True, upload_to='nda_documents/', verbose_name='NDA Document')),
                ('health_declaration', models.BooleanField(default=False, verbose_name='Health Declaration Signed')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Temperature (°C)')),
                ('qr_code', models.CharField(blank=True, max_length=100, unique=True, verbose_name='QR Code')),
                ('qr_image', models.ImageField(blank=True, null=True, upload_to='qr_codes/', verbose_name='QR Code Image')),
                ('badge_printed', models.BooleanField(default=False, verbose_name='Badge Printed')),
                ('badge_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Badge Number')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('host', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='visitors', to=settings.AUTH_USER_MODEL, verbose_name='Host')),
            ],
            options={
                'verbose_name': 'Visitor',
                'verbose_name_plural': 'Visitors',
                'ordering': ['-check_in_time'],
            },
        ),
        migrations.CreateModel(
            name='Blacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(verbose_name='Blacklist Reason')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Date Added')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Added By')),
                ('visitor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='blacklist_entry', to='visitors.visitor', verbose_name='Visitor')),
            ],
            options={
                'verbose_name': 'Blacklisted Visitor',
                'verbose_name_plural': 'Blacklisted Visitors',
                'ordering': ['-added_at'],
            },
        ),
        migrations.CreateModel(
            name='VisitorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('pre_register', 'Pre-Registered'), ('check_in', 'Checked In'), ('check_out', 'Checked Out'), ('status_change', 'Status Changed'), ('document_upload', 'Document Uploaded'), ('blacklisted', 'Blacklisted')], max_length=20, verbose_name='Action')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
                ('visitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='visitors.visitor', verbose_name='Visitor')),
            ],
            options={
                'verbose_name': 'Visitor Log',
                'verbose_name_plural': 'Visitor Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['status'], name='visitors_vi_status_9b5b9b_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['check_in_time'], name='visitors_vi_check_i_436612_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['host'], name='visitors_vi_host_id_443f1d_idx'),
        ),
        migrations.AddIndex(
            model_name='visitor',
            index=models.Index(fields=['visitor_type'], name='visitors_vi_visitor_ed91a7_idx'),
        ),
    ]
